
macro(set_dependency list_deps)
  unset(target_global_libs)
  set(target_use_qt FALSE)

  status("target_use_qt: ${target_use_qt}")

  set(target_global_libs)

  # Add directory to CMake's module path
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
  include(cmake/compilers.cmake REQUIRED)

  foreach(arg ${ARGV})
    if    (arg STREQUAL "opencv")
      find_package(OpenCV REQUIRED)
      list(APPEND target_global_libs ${OpenCV_LIBS})
    elseif(arg STREQUAL "ffmpeg")
      find_package(FFMPEG REQUIRED)
      list(APPEND target_global_libs ${FFMPEG_LIBRARIES})
    elseif(arg STREQUAL "webp")
      find_package(WebP REQUIRED)
      list(APPEND target_global_libs ${WEBP_LIBRARIES})
    elseif(arg STREQUAL "sdl")
      find_package(SDL REQUIRED)
      list(APPEND target_global_libs ${SDL_LIBRARY})
    elseif(arg STREQUAL "qt4")
      set(target_use_qt TRUE)
      find_package(Qt4 4.8.0 COMPONENTS QtCore QtGui QtNetwork QtOpenGL QtTest REQUIRED)
      include(${QT_USE_FILE})
      include_directories( ${QT_INCLUDE_DIR} )

      list(APPEND target_global_libs ${QT_LIBRARIES})
    elseif(arg STREQUAL "tbb")
      find_package(TBB REQUIRED)
      list(APPEND target_global_libs ${TBB_LIBRARIES})
    elseif(arg STREQUAL "opengl")
      find_package(OpenGL REQUIRED)
      list(APPEND target_global_libs ${OPENGL_LIBRARIES})
      find_package(GLUT REQUIRED)
      list(APPEND target_global_libs ${GLUT_LIBRARIES})
    elseif()
      status("Unknown option: ${arg}")
    endif()
  endforeach()
endmacro()

macro(add_application proj_name folders)
  unset(target_global_code)
  unset(target_global_moc_code)
  set(target_global_code)
  set(target_global_moc_code)

  set(projectname "")

  foreach(arg ${ARGV})
    if(projectname STREQUAL "")
        set(projectname ${arg})
    else()
        file(GLOB srcs "${arg}/*.cpp")
        file(GLOB hdrs "${arg}/*.hpp")

        foreach(src ${srcs})
            list(APPEND target_global_code ${src})
        endforeach()

        foreach(hdr ${hdrs})
          if (target_use_qt)
            check_moc_file(${hdr})
            if (IS_MOC_FILE)
              list(APPEND target_global_moc_code ${hdr})  
            else()
              list(APPEND target_global_code ${hdr})
            endif()
          else()
            list(APPEND target_global_code ${hdr})
          endif()
        endforeach()
    endif()
  endforeach()

  list(LENGTH target_global_code len_list)
  unset(target_mocs_obj)

  if (${len_list} LESS 1)
    message(FATAL_ERROR "ERROR: Source files not found !!!")
  else()
    if (target_use_qt)
      list(LENGTH target_global_moc_code len_moc_list)
      if (${len_list} GREATER 0)
        qt4_wrap_cpp(target_mocs_obj ${target_global_moc_code})
      endif()
    endif()
    add_executable(${projectname} ${target_global_code} ${target_mocs_obj})
    target_link_libraries(${projectname} ${target_global_libs})
    status("${projectname}:")
    status("    sources     : " ${target_global_code})
    status("    libraries   : " ${target_global_libs})
    if (target_use_qt)
      status("    moc objects : " ${target_mocs_obj})
    endif()
  endif()
endmacro()

macro(check_moc_file file)
  file(STRINGS "${file}" lists_OBJS REGEX ".*Q_OBJECT.*")
  string(STRIP "${lists_OBJS}" str_str)
  string(COMPARE EQUAL "Q_OBJECT" "${str_str}" MOC_FILE_OBJ)

  file(STRINGS "${file}" lists_OBJS REGEX "include.*Qt.*")
  string(STRIP "${lists_OBJS}" str_str)
  string(COMPARE NOTEQUAL "" "${str_str}" MOC_FILE_INC)

  if(${MOC_FILE_OBJ} OR ${MOC_FILE_INC})
    set(IS_MOC_FILE TRUE)
  else()
    set(IS_MOC_FILE FALSE)
  endif()
endmacro()

# Status report function.
# Automatically align right column and selects text based on condition.
# Usage:
#   status(<text>)
#   status(<heading> <value1> [<value2> ...])
#   status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )
function(status text)
  set(status_cond)
  set(status_then)
  set(status_else)

  set(status_current_name "cond")
  foreach(arg ${ARGN})
    if(arg STREQUAL "THEN")
      set(status_current_name "then")
    elseif(arg STREQUAL "ELSE")
      set(status_current_name "else")
    else()
      list(APPEND status_${status_current_name} ${arg})
    endif()
  endforeach()

  if(DEFINED status_cond)
    set(status_placeholder_length 32)
    string(RANDOM LENGTH ${status_placeholder_length} ALPHABET " " status_placeholder)
    string(LENGTH "${text}" status_text_length)
    if(status_text_length LESS status_placeholder_length)
      string(SUBSTRING "${text}${status_placeholder}" 0 ${status_placeholder_length} status_text)
    elseif(DEFINED status_then OR DEFINED status_else)
      message(STATUS "${text}")
      set(status_text "${status_placeholder}")
    else()
      set(status_text "${text}")
    endif()

    if(DEFINED status_then OR DEFINED status_else)
      if(${status_cond})
        string(REPLACE ";" " " status_then "${status_then}")
        string(REGEX REPLACE "^[ \t]+" "" status_then "${status_then}")
        message(STATUS "${status_text} ${status_then}")
      else()
        string(REPLACE ";" " " status_else "${status_else}")
        string(REGEX REPLACE "^[ \t]+" "" status_else "${status_else}")
        message(STATUS "${status_text} ${status_else}")
      endif()
    else()
      string(REPLACE ";" " " status_cond "${status_cond}")
      string(REGEX REPLACE "^[ \t]+" "" status_cond "${status_cond}")
      message(STATUS "${status_text} ${status_cond}")
    endif()
  else()
    message(STATUS "${text}")
  endif()
endfunction()


